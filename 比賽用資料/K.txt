我K2的解題過程

!! K(input)代表程式的輸出

一開始我打算用RegEx去解
把以下這些合併
    字母重複兩次以上的
    K("aaaaa") = K("aa")
    兩個字母的規律
    K("awawawa") = K("awa")
跟找"awaa"(或"aawa")的特例，要減一
    "aa" "aa" "aw" -> "aa" "aw"

但是這個太慢了，而且RegEx不好寫


然後我用用看Sliding Window，因為原理很像，從左往右掃，一對一對刪去
考慮刪去前跟刪去後的字母: (用#墊好以計算)
    "#aabbccd#"
    "#__b" "a__b" "a__c" "b__c" "b__d" "c__#"
感覺可以

考慮特例:
    "#awawawa#"
    "#__a" "a__w" "w__a" "a__w" "w__a" "a__#"
擴張Window看看
    "#awawawa##"
    "#__aw" "a__wa" "w__aw" "a__wa" "w__a#" "a__##"

好像有規律?
    "#aw"
    "awa"
    "waw"
    "awa"
    "wa#"
    "a##"


其他特例
    "#aaaaa##"

    "#aa"
    "aaa"
    "aa#"
    "a##"
    
    "#awaa##"

    "#aa"
    "aa#"
    "w##"

    "#aawa##"

    "#wa"
    "aa#"
    "a##"

如果重複的話字母相當於往左跑一格!

    prev_window[1:] == window[:-1]

在此window = s_prime[i] + s_prime[i + 3] + s_prime[i + 4]
    prev_window = s_prime[(i - 1)] + s_prime[(i - 1) + 3] + s_prime[(i - 1) + 4]
                = s_prime[i - 1] + s_prime[i + 2] + s_prime[i + 3]
帶回展開
    (s_prime[i - 1] + s_prime[i + 2] + s_prime[i + 3])[1:] == (s_prime[i] + s_prime[i + 3] + s_prime[i + 4])[:-1]
=>  s_prime[i + 2] + s_prime[i + 3] == s_prime[i] + s_prime[i + 3]
=>  s_prime[i + 2] == s_prime[i]


有關的演算法:
  Manacher's algorithm
https://en.wikipedia.org/wiki/Longest_palindromic_substring
